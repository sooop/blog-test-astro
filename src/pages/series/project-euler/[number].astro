---
import { getCollection, render } from 'astro:content';
import BaseLayout from '../../../layouts/BaseLayout.astro';
import PostNavigation from '../../../components/PostNavigation.astro';
import { calculateReadingTime } from '../../../utils/reading-time';

export async function getStaticPaths() {
  const projectEulerPosts = await getCollection('project-euler');

  // Helper to extract filename without extension
  const getFileNumber = (filePath: string) => {
    return filePath.split('/').pop()?.replace('.md', '') ?? '';
  };

  // Sort by number ascending
  const sortedPosts = projectEulerPosts.sort((a, b) => {
    const numA = parseInt(getFileNumber(a.filePath ?? ''));
    const numB = parseInt(getFileNumber(b.filePath ?? ''));
    return numA - numB;
  });

  return sortedPosts.map((post, index) => ({
    params: { number: getFileNumber(post.filePath ?? '') },
    props: {
      post,
      prevPost: index > 0 ? sortedPosts[index - 1] : null,
      nextPost: index < sortedPosts.length - 1 ? sortedPosts[index + 1] : null,
    },
  }));
}

const { post, prevPost, nextPost } = Astro.props;
const { Content } = await render(post);
const readingTime = calculateReadingTime(post.body);

const getFileNumber = (filePath: string) => {
  return filePath.split('/').pop()?.replace('.md', '') ?? '';
};

// Dynamic title size based on length
const titleLength = post.data.title.length;
const titleSizeClass = titleLength > 60 ? 'text-3xl md:text-4xl' :
                       titleLength > 40 ? 'text-4xl md:text-4xl' :
                       'text-4xl md:text-5xl';

// Dynamic excerpt size based on length
const excerptLength = post.data.custom_excerpt?.length || 0;
const excerptSizeClass = excerptLength > 150 ? 'text-lg' :
                         excerptLength > 100 ? 'text-lg md:text-xl' :
                         'text-xl';
---

<BaseLayout title={post.data.title} currentPath={Astro.url.pathname}>
  <article class="max-w-4xl mx-auto px-6 py-12 md:py-16">
    <header class="mb-16">
      <div class="mb-4 text-center">
        <span class="inline-flex items-center text-sm font-medium text-accent">
          <svg class="w-4 h-4 mr-1.5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19 11H5m14 0a2 2 0 012 2v6a2 2 0 01-2 2H5a2 2 0 01-2-2v-6a2 2 0 012-2m14 0V9a2 2 0 00-2-2M5 11V9a2 2 0 012-2m0 0V5a2 2 0 012-2h6a2 2 0 012 2v2M7 7h10" />
          </svg>
          Project Euler
        </span>
      </div>

      <h1 class={`font-serif ${titleSizeClass} mb-6 text-foreground leading-tight text-center`}>
        {post.data.title}
      </h1>

      {post.data.custom_excerpt && (
        <p class={`${excerptSizeClass} text-muted-foreground mb-8 leading-relaxed font-serif text-center`}>
          {post.data.custom_excerpt}
        </p>
      )}

      <div class="flex flex-wrap items-center gap-x-6 gap-y-3 text-sm border-t border-b border-border py-4">
        <div class="flex items-center gap-2">
          <svg class="w-4 h-4 text-muted-foreground" fill="none" stroke="currentColor" viewBox="0 0 24 24">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M8 7V3m8 4V3m-9 8h10M5 21h14a2 2 0 002-2V7a2 2 0 00-2-2H5a2 2 0 00-2 2v12a2 2 0 002 2z" />
          </svg>
          <time datetime={post.data.published_date.toISOString()} class="text-muted-foreground">
            {new Date(post.data.published_date).toLocaleDateString('ko-KR', {
              year: 'numeric',
              month: 'long',
              day: 'numeric'
            })}
          </time>
        </div>

        {post.data.modified_date && (
          <div class="flex items-center gap-2">
            <svg class="w-4 h-4 text-muted-foreground" fill="none" stroke="currentColor" viewBox="0 0 24 24">
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M4 4v5h.582m15.356 2A8.001 8.001 0 004.582 9m0 0H9m11 11v-5h-.581m0 0a8.003 8.003 0 01-15.357-2m15.357 2H15" />
            </svg>
            <time datetime={post.data.modified_date.toISOString()} class="text-muted-foreground">
              {new Date(post.data.modified_date).toLocaleDateString('ko-KR', {
                year: 'numeric',
                month: 'long',
                day: 'numeric'
              })}
            </time>
          </div>
        )}

        <div class="flex items-center gap-2">
          <svg class="w-4 h-4 text-muted-foreground" fill="none" stroke="currentColor" viewBox="0 0 24 24">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 8v4l3 3m6-3a9 9 0 11-18 0 9 9 0 0118 0z" />
          </svg>
          <span class="text-muted-foreground">{readingTime}ë¶„</span>
        </div>

        {post.data.tags && post.data.tags.length > 0 && (
          <div class="flex items-center gap-2 ml-auto">
            <svg class="w-4 h-4 text-muted-foreground" fill="none" stroke="currentColor" viewBox="0 0 24 24">
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M7 7h.01M7 3h5c.512 0 1.024.195 1.414.586l7 7a2 2 0 010 2.828l-7 7a2 2 0 01-2.828 0l-7-7A1.994 1.994 0 013 12V7a4 4 0 014-4z" />
            </svg>
            <div class="flex flex-wrap gap-2">
              {post.data.tags.map(tag => (
                <span class="text-xs text-muted-foreground hover:text-foreground transition-colors">
                  #{tag}
                </span>
              ))}
            </div>
          </div>
        )}
      </div>
    </header>

    <div class="prose prose-lg max-w-none">
      <Content />
    </div>

    <PostNavigation
      prevPost={prevPost ? { url: `/series/project-euler/${getFileNumber(prevPost.filePath ?? '')}`, title: prevPost.data.title } : null}
      nextPost={nextPost ? { url: `/series/project-euler/${getFileNumber(nextPost.filePath ?? '')}`, title: nextPost.data.title } : null}
      listUrl="/series/project-euler"
    />
  </article>
</BaseLayout>
